{"version":3,"file":"index.js","sources":["sample/random.js","sample/stars.js","sample/target.js","sample/viewport.js","sample/app.js"],"sourcesContent":["export function randomInt(n) {\r\n    return Math.floor(Math.random() * n)\r\n}\r\n\r\nexport function randomFloat(n) {\r\n    return Math.random() * n\r\n}\r\n\r\nexport function range(start, end, useFloat = false) {\r\n    // case where there is no range\r\n    if (end === start) {\r\n        return end\r\n    }\r\n\r\n    if (useFloat) {\r\n        return randomFloat(end - start, true) + start\r\n    } else {\r\n        let range\r\n        if (start < 0 && end > 0) {\r\n            range = -start + end + 1\r\n        } else if (start === 0 && end > 0) {\r\n            range = end + 1\r\n        } else if (start < 0 && end === 0) {\r\n            range = start - 1\r\n            start = 1\r\n        } else if (start < 0 && end < 0) {\r\n            range = end - start - 1\r\n        } else {\r\n            range = end - start + 1\r\n        }\r\n        return randomInt(range) + start\r\n    }\r\n}","import * as random from './random'\r\n\r\nfunction overlap(x, y, viewport, starSize) {\r\n    const size = starSize\r\n    for (const child of viewport.children) {\r\n        if (x < child.x + size &&\r\n            x + size > child.x &&\r\n            y < child.y + size &&\r\n            y + size > child.y) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nexport function stars(viewport, starSize, border) {\r\n    const stars = (viewport.worldWidth * viewport.worldHeight) / Math.pow(starSize, 2) * 0.1\r\n    for (let i = 0; i < stars; i++) {\r\n        const star = new PIXI.Sprite(PIXI.Texture.WHITE)\r\n        star.anchor.set(0.5)\r\n        star.tint = random.randomInt(0xffffff)\r\n        star.width = star.height = starSize\r\n        star.alpha = random.range(0.25, 1, true)\r\n        let x, y\r\n        do {\r\n            x = random.range(starSize / 2 + border, viewport.worldWidth - starSize - border)\r\n            y = random.range(border, viewport.worldHeight - border - starSize)\r\n        } while (overlap(x, y, viewport, starSize))\r\n        star.position.set(x, y)\r\n        viewport.addChild(star)\r\n    }\r\n}","import { range } from './random'\r\n\r\nconst SIZE = 40\r\nconst SPEED = 3\r\nconst SPIN_SPEED = 0.05\r\n\r\nconst target = new PIXI.Sprite(PIXI.Texture.WHITE)\r\n\r\nlet _viewport, _active, _velocity, _time, _last\r\n\r\nexport function start() {\r\n    _active = true\r\n    _last = Date.now()\r\n}\r\n\r\nexport function setup(viewport) {\r\n    viewport.addChild(target)\r\n    target.tint = 0\r\n    target.width = target.height = SIZE\r\n    target.anchor.set(0.5)\r\n    target.position.set(viewport.worldWidth / 2, viewport.worldHeight / 2)\r\n    _viewport = viewport\r\n    changeTarget()\r\n}\r\n\r\nexport function get() {\r\n    return target\r\n}\r\n\r\nexport function update() {\r\n    if (_active) {\r\n        target.rotation += SPIN_SPEED\r\n        target.x += _velocity[0]\r\n        target.y += _velocity[1]\r\n        const now = Date.now()\r\n        _time -= now - _last\r\n        _last = now\r\n        if (_time <= 0) {\r\n            changeTarget()\r\n        }\r\n    }\r\n}\r\n\r\nfunction changeTarget() {\r\n    const x = range(SIZE / 2, _viewport.worldWidth - SIZE / 2)\r\n    const y = range(SIZE / 2, _viewport.worldHeight - SIZE / 2)\r\n    const angle = Math.atan2(y - target.y, x - target.x)\r\n    _velocity = [Math.cos(angle) * SPEED, Math.sin(angle) * SPEED]\r\n    _time = Math.sqrt(Math.pow(x - target.x, 2) + Math.pow(y - target.y, 2)) / (SPEED * 60 / 1000)\r\n}\r\n\r\nexport function isDirty() {\r\n    return _active\r\n}","// import { Viewport } from 'pixi-viewport' // use with modern build toolchain\r\n\r\nimport { stars } from './stars'\r\nimport * as target from './target'\r\n\r\nconst WORLD_WIDTH = 2000\r\nconst WORLD_HEIGHT = 2000\r\nconst STAR_SIZE = 30\r\nconst BORDER = 10\r\n\r\n// INSTRUCTIONS\r\n// see https://davidfig.github.io/pixi-viewport/jsdoc/ for full API documentation\r\n// uncomment out the plugins or change options to experiment with how the viewport works\r\nlet viewport\r\n\r\nexport function create(renderer) {\r\n    // create the viewport\r\n    // viewport = new Viewport({    // use with modern build toolchain\r\n    viewport = new pixi_viewport.Viewport({\r\n        // screenWidth: window.innerWidth,              // screen width used by viewport (eg, size of canvas)\r\n        // screenHeight: window.innerHeight,            // screen height used by viewport (eg, size of canvas)\r\n        worldWidth: WORLD_WIDTH,                        // world width used by viewport (automatically calculated based on container width)\r\n        worldHeight: WORLD_HEIGHT,                      // world height used by viewport (automatically calculated based on container height)\r\n        // threshold: 5,                                // number of pixels to move to trigger an input event (e.g., drag, pinch) or disable a clicked event\r\n        passiveWheel: false,                            // whether the 'wheel' event is set to passive (note: if false, e.preventDefault() will be called when wheel is used over the viewport)\r\n        // stopPropagation: false,                      // whether to stopPropagation of events that impact the viewport (except wheel events, see options.passiveWheel)\r\n        // forceHitArea: null,                          // change the default hitArea from world size to a new value\r\n        // noTicker: false,                             // set this if you want to manually call update() function on each frame\r\n        // ticker: PIXI.Ticker.shared,                  // use this PIXI.ticker for updates\r\n        interaction: renderer.plugins.interaction,   // InteractionManager, available from instantiated WebGLRenderer/CanvasRenderer.plugins.interaction - used to calculate pointer position relative to canvas location on screen\r\n        // divWheel: null,                              // div to attach the wheel event (uses document.body as default)\r\n        // disableOnContextMenu: false,                 // remove oncontextmenu=() => {} from the divWheel element\r\n    })\r\n\r\n    viewport\r\n        .drag({\r\n            // direction: 'all',                // (x, y, or all) direction to drag\r\n            // pressDrag: true,                 // whether click to drag is active\r\n            // wheel: true,                     // use wheel to scroll in direction (unless wheel plugin is active)\r\n            // wheelScroll: 1,                  // number of pixels to scroll with each wheel spin\r\n            // reverse: false,                  // reverse the direction of the wheel scroll\r\n            // clampWheel: false,               // clamp wheel (to avoid weird bounce with mouse wheel)\r\n            // underflow: 'center',             // (top-left, top-center, etc.) where to place world if too small for screen\r\n            // factor: 1,                       // factor to multiply drag to increase the speed of movement\r\n            // mouseButtons: 'all',             // changes which mouse buttons trigger drag, use: 'all', 'left', right' 'middle', or some combination, like, 'middle-right'; you may want to set viewport.options.disableOnContextMenu if you want to use right-click dragging\r\n            // keyToPress: null,                // array containing https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code codes of keys that can be pressed for the drag to be triggered, e.g.: ['ShiftLeft', 'ShiftRight'}\r\n            // ignoreKeyToPressOnTouch: false,  // ignore keyToPress for touch events\r\n            // lineHeight: 20,                  // scaling factor for non-DOM_DELTA_PIXEL scrolling events (used for firefox mouse scrolling)\r\n        })\r\n        .decelerate({\r\n            // friction: 0.95,              // percent to decelerate after movement\r\n            // bounce: 0.8,                 // percent to decelerate when past boundaries (only applicable when viewport.bounce() is active)\r\n            // minSpeed: 0.01,              // minimum velocity before stopping/reversing acceleration\r\n        })\r\n        .pinch({\r\n            // noDrag: false,               // disable two-finger dragging\r\n            // percent: 1,                  // percent to modify pinch speed\r\n            // factor: 1,                   // factor to multiply two-finger drag to increase the speed of movement\r\n            // center: null,                // place this point at center during zoom instead of center of two fingers\r\n            // axis: 'all',                 // axis to zoom\r\n        })\r\n        .wheel({\r\n            // percent: 0.1,                // smooth the zooming by providing the number of frames to zoom between wheel spins\r\n            // interrupt: true,             // stop smoothing with any user input on the viewport\r\n            // reverse: false,              // reverse the direction of the scroll\r\n            // center: null,                // place this point at center during zoom instead of current mouse position\r\n            // lineHeight: 20,\t            // scaling factor for non-DOM_DELTA_PIXEL scrolling events\r\n            // axis: 'all',                 // axis to zoom\r\n        })\r\n\r\n    // viewport.bounce({\r\n    //     sides: 'all',                // all, horizontal, vertical, or combination of top, bottom, right, left(e.g., 'top-bottom-right')\r\n    //     friction: 0.5,               // friction to apply to decelerate if active\r\n    //     time: 150,                   // time in ms to finish bounce\r\n    //     bounceBox: null,             // use this bounceBox instead of { x: 0, y: 0, width: viewport.worldWidth, height: viewport.worldHeight }\r\n    //     ease: 'easeInOutSine',       // ease function or name (see http://easings.net/ for supported names)\r\n    //     underflow: 'center',         // (top/bottom/center and left/right/center, or center) where to place world if too small for screen\r\n    // })\r\n\r\n    // viewport.animate({\r\n    //     time: 1000,                     // time to animate\r\n    //     position: null,                 // position to move viewport\r\n    //     width: null,                    // desired viewport width in world pixels (use instead of scale; aspect ratio is maintained if height is not provided)\r\n    //     height: null,                   // desired viewport height in world pixels(use instead of scale; aspect ratio is maintained if width is not provided)\r\n    //     scale: null,                    // scale to change zoom(scale.x = scale.y)\r\n    //     scaleX: null,                   // independently change zoom in x - direction\r\n    //     scaleY: null,                   // independently change zoom in y - direction\r\n    //     ease: 'linear',                 // easing function to use\r\n    //     callbackOnComplete: null,       // callback when animate is complete\r\n    //     removeOnInterrupt: false,\t   // removes this plugin if interrupted by any user input\r\n    // })\r\n\r\n    // viewport.clamp({\r\n    //     left: false,                // whether to clamp to the left and at what value\r\n    //     right: false,               // whether to clamp to the right and at what value\r\n    //     top: false,                 // whether to clamp to the top and at what value\r\n    //     bottom: false,              // whether to clamp to the bottom and at what value\r\n    //     direction: 'all',           // (all, x, or y) using clamps of [0, viewport.worldWidth / viewport.worldHeight]; replaces left / right / top / bottom if set\r\n    //     underflow: 'center',\t       // where to place world if too small for screen (e.g., top - right, center, none, bottomleft)\r\n    // })\r\n\r\n    // viewport.clampZoom({\r\n    //     minWidth: null,                 // minimum width\r\n    //     minHeight: null,                // minimum height\r\n    //     maxWidth: null,                 // maximum width\r\n    //     maxHeight: null,                // maximum height\r\n    //     minScale: null,                 // minimum scale\r\n    //     maxScale: null,                 // minimum scale\r\n    // })\r\n\r\n    // target.start()  // starts the target moving\r\n    // viewport.follow(target.get(), {\r\n    //     speed: 0,           // speed to follow in pixels/frame (0=teleport to location)\r\n    //     acceleration: null, // set acceleration to accelerate and decelerate at this rate; speed cannot be 0 to use acceleration\r\n    //     radius: null,       // radius (in world coordinates) of center circle where movement is allowed without moving the viewport\r\n    // })\r\n\r\n    // viewport.mouseEdges({\r\n    //     radius: null,           // distance from center of screen in screen pixels\r\n    //     distance: 20,           // distance from all sides in screen pixels\r\n    //     top: null,              // alternatively, set top distance (leave unset for no top scroll)\r\n    //     bottom: null,           // alternatively, set bottom distance (leave unset for no top scroll)\r\n    //     left: null,             // alternatively, set left distance (leave unset for no top scroll)\r\n    //     right: null,            // alternatively, set right distance (leave unset for no top scroll)\r\n    //     speed: 8,               // speed in pixels/frame to scroll viewport\r\n    //     reverse: false,         // reverse direction of scroll\r\n    //     noDecelerate: false,    // don't use decelerate plugin even if it's installed\r\n    //     linear: false,          // if using radius, use linear movement (+/- 1, +/- 1) instead of angled movement (Math.cos(angle from center), Math.sin(angle from center))\r\n    //     allowButtons: false,    // allows plugin to continue working even when there's a mousedown event\r\n    // })\r\n\r\n    // viewport.snap({\r\n    //     topLeft: false,             // snap to the top-left of viewport instead of center\r\n    //     friction: 0.8,              // friction/frame to apply if decelerate is active\r\n    //     time: 1000,                 // time for snapping in ms\r\n    //     ease: 'easeInOutSine',      // ease function or name (see http://easings.net/ for supported names)\r\n    //     interrupt: true,            // pause snapping with any user input on the viewport\r\n    //     removeOnComplete: false,    // removes this plugin after snapping is complete\r\n    //     removeOnInterrupt: false,   // removes this plugin if interrupted by any user input\r\n    //     forceStart: false,          // starts the snap immediately regardless of whether the viewport is at the desired location\r\n    // })\r\n\r\n    // viewport.snapZoom({\r\n    //     width: 0,                   // the desired width to snap (to maintain aspect ratio, choose only width or height)\r\n    //     height: 0,                  // the desired height to snap(to maintain aspect ratio, choose only width or height)\r\n    //     time: 1000,                 // time for snapping in ms\r\n    //     ease: 'easeInOutSine',      // ease function or name(see http://easings.net/ for supported names)\r\n    //     center: null,               // place this point at center during zoom instead of center of the viewport\r\n    //     interrupt: true,            // pause snapping with any user input on the viewport\r\n    //     removeOnComplete: false,    // removes this plugin after snapping is complete\r\n    //     removeOnInterrupt: false,   // removes this plugin if interrupted by any user input\r\n    //     forceStart: false,          // starts the snap immediately regardless of whether the viewport is at the desired zoom\r\n    //     noMove: false,              // zoom but do not move\r\n    // })\r\n\r\n    // create elements\r\n    stars(viewport, STAR_SIZE, BORDER)\r\n    target.setup(viewport)\r\n    border(viewport, BORDER)\r\n\r\n    // fit and center the world into the panel\r\n    viewport.fit()\r\n    viewport.moveCenter(WORLD_WIDTH / 2, WORLD_HEIGHT / 2)\r\n}\r\n\r\nfunction border(viewport) {\r\n    const line = viewport.addChild(new PIXI.Graphics())\r\n    line.lineStyle(10, 0xff0000).drawRect(0, 0, viewport.worldWidth, viewport.worldHeight)\r\n}\r\n\r\nexport function get() {\r\n    return viewport\r\n}","// import * as PIXI from 'pixi.js'  // use with modern build toolchain\r\nimport * as viewport from './viewport'\r\nimport * as target from './target'\r\n\r\nlet renderer\r\n\r\nfunction createRenderer() {\r\n    renderer = new PIXI.Renderer({\r\n        backgroundAlpha: 0,\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        resolution: window.devicePixelRatio,\r\n        antialias: true,\r\n    })\r\n    document.body.appendChild(renderer.view)\r\n    renderer.view.style.position = 'fixed'\r\n    renderer.view.style.width = '100vw'\r\n    renderer.view.style.height = '100vh'\r\n    renderer.view.style.top = 0\r\n    renderer.view.style.left = 0\r\n    renderer.view.style.background = 'rgba(0,0,0,.1)'\r\n}\r\n\r\nfunction start() {\r\n    createRenderer()\r\n    viewport.create(renderer)\r\n    window.onresize = () => {\r\n        renderer.resize(window.innerWidth, window.innerHeight)\r\n        viewport.get().resize(window.innerWidth, window.innerHeight)\r\n    }\r\n    update()\r\n}\r\n\r\nfunction update() {\r\n    const vp = viewport.get()\r\n    if (vp.dirty || target.isDirty()) {\r\n        target.update()\r\n        renderer.render(vp)\r\n        vp.dirty = false\r\n    }\r\n    requestAnimationFrame(() => update())\r\n}\r\n\r\nwindow.onload = start"],"names":["random.randomInt","random.range","target.setup","viewport.create","viewport.get","target.isDirty"],"mappings":"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"}